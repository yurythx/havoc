# Script de teste de deploy para Windows PowerShell
# Testa a configura√ß√£o do container Docker

Write-Host "üê≥ TESTE DE DEPLOY HAVOC - WINDOWS" -ForegroundColor Blue
Write-Host "=================================" -ForegroundColor Blue
Write-Host ""

# Fun√ß√£o para logging
function Write-Log {
    param($Message, $Color = "White")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Warning {
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

# Verificar se Docker est√° dispon√≠vel
Write-Log "Verificando Docker..."
try {
    $dockerVersion = docker --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Docker encontrado: $dockerVersion"
    } else {
        Write-Error "Docker n√£o est√° dispon√≠vel"
        Write-Warning "Instale Docker Desktop para Windows"
        exit 1
    }
} catch {
    Write-Error "Erro ao verificar Docker: $_"
    exit 1
}

# Verificar se Docker Compose est√° dispon√≠vel
Write-Log "Verificando Docker Compose..."
try {
    $composeVersion = docker-compose --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Docker Compose encontrado: $composeVersion"
    } else {
        Write-Error "Docker Compose n√£o est√° dispon√≠vel"
        exit 1
    }
} catch {
    Write-Error "Erro ao verificar Docker Compose: $_"
    exit 1
}

# Verificar arquivos necess√°rios
Write-Log "Verificando arquivos necess√°rios..."
$requiredFiles = @(
    "Dockerfile",
    "docker-compose.yml",
    "requirements.txt",
    "requirements-prod.txt",
    "manage.py",
    ".env"
)

$missingFiles = @()
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Success "Arquivo encontrado: $file"
    } else {
        Write-Error "Arquivo n√£o encontrado: $file"
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Error "Arquivos obrigat√≥rios n√£o encontrados. Abortando teste."
    exit 1
}

# Verificar configura√ß√£o do .env
Write-Log "Verificando configura√ß√£o do .env..."
if (Test-Path ".env") {
    $envContent = Get-Content ".env" -Raw
    
    # Verificar SECRET_KEY
    if ($envContent -match "SECRET_KEY=django-insecure-test-key") {
        Write-Success "SECRET_KEY de teste encontrada"
    } elseif ($envContent -match "SECRET_KEY=django-insecure-CHANGE") {
        Write-Warning "SECRET_KEY padr√£o detectada - OK para teste"
    } else {
        Write-Success "SECRET_KEY personalizada configurada"
    }
    
    # Verificar configura√ß√£o de banco
    if ($envContent -match "DATABASE_ENGINE=postgresql") {
        Write-Success "Configura√ß√£o PostgreSQL detectada"
    } else {
        Write-Warning "Configura√ß√£o de banco n√£o padr√£o"
    }
    
    # Verificar ALLOWED_HOSTS
    if ($envContent -match "ALLOWED_HOSTS=") {
        Write-Success "ALLOWED_HOSTS configurado"
    } else {
        Write-Warning "ALLOWED_HOSTS n√£o encontrado"
    }
} else {
    Write-Error "Arquivo .env n√£o encontrado"
    Write-Warning "Execute: Copy-Item .env.docker .env"
    exit 1
}

# Testar build da imagem
Write-Log "Testando build da imagem Docker..."
try {
    Write-Log "Executando: docker-compose build web"
    $buildOutput = docker-compose build web 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Build da imagem conclu√≠do com sucesso"
    } else {
        Write-Error "Falha no build da imagem"
        Write-Host "Output do build:" -ForegroundColor Yellow
        Write-Host $buildOutput -ForegroundColor Gray
        exit 1
    }
} catch {
    Write-Error "Erro durante o build: $_"
    exit 1
}

# Testar configura√ß√£o do docker-compose
Write-Log "Validando configura√ß√£o do docker-compose..."
try {
    $configOutput = docker-compose config 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Configura√ß√£o do docker-compose v√°lida"
    } else {
        Write-Error "Configura√ß√£o do docker-compose inv√°lida"
        Write-Host $configOutput -ForegroundColor Gray
        exit 1
    }
} catch {
    Write-Error "Erro ao validar docker-compose: $_"
    exit 1
}

# Testar inicializa√ß√£o dos servi√ßos
Write-Log "Testando inicializa√ß√£o dos servi√ßos..."
try {
    Write-Log "Iniciando servi√ßos em background..."
    docker-compose up -d db 2>&1 | Out-Null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Banco de dados iniciado"
        
        # Aguardar banco ficar pronto
        Write-Log "Aguardando banco de dados ficar pronto..."
        $maxWait = 30
        $waited = 0
        
        do {
            Start-Sleep 2
            $waited += 2
            $dbStatus = docker-compose exec -T db pg_isready -U havoc_user 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Success "Banco de dados est√° pronto"
                break
            }
            Write-Log "Aguardando banco... ($waited/$maxWait segundos)"
        } while ($waited -lt $maxWait)
        
        if ($waited -ge $maxWait) {
            Write-Warning "Timeout aguardando banco de dados"
        }
        
    } else {
        Write-Error "Falha ao iniciar banco de dados"
        exit 1
    }
} catch {
    Write-Error "Erro ao testar servi√ßos: $_"
    exit 1
}

# Testar aplica√ß√£o web
Write-Log "Testando aplica√ß√£o web..."
try {
    Write-Log "Iniciando aplica√ß√£o web..."
    docker-compose up -d web 2>&1 | Out-Null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Aplica√ß√£o web iniciada"
        
        # Aguardar aplica√ß√£o ficar pronta
        Write-Log "Aguardando aplica√ß√£o ficar pronta..."
        $maxWait = 60
        $waited = 0
        
        do {
            Start-Sleep 3
            $waited += 3
            try {
                $response = Invoke-WebRequest -Uri "http://localhost:8000/health/" -TimeoutSec 5 -UseBasicParsing 2>$null
                if ($response.StatusCode -eq 200) {
                    Write-Success "Aplica√ß√£o est√° respondendo"
                    break
                }
            } catch {
                # Continuar tentando
            }
            Write-Log "Aguardando aplica√ß√£o... ($waited/$maxWait segundos)"
        } while ($waited -lt $maxWait)
        
        if ($waited -ge $maxWait) {
            Write-Warning "Timeout aguardando aplica√ß√£o"
            Write-Log "Verificando logs da aplica√ß√£o..."
            docker-compose logs --tail=20 web
        } else {
            # Testar endpoint principal
            try {
                $mainResponse = Invoke-WebRequest -Uri "http://localhost:8000/" -TimeoutSec 10 -UseBasicParsing
                if ($mainResponse.StatusCode -eq 200) {
                    Write-Success "Endpoint principal funcionando"
                } else {
                    Write-Warning "Endpoint principal retornou status: $($mainResponse.StatusCode)"
                }
            } catch {
                Write-Warning "Erro ao acessar endpoint principal: $_"
            }
        }
        
    } else {
        Write-Error "Falha ao iniciar aplica√ß√£o web"
        docker-compose logs web
        exit 1
    }
} catch {
    Write-Error "Erro ao testar aplica√ß√£o: $_"
    exit 1
}

# Mostrar status final
Write-Log "Verificando status final dos servi√ßos..."
docker-compose ps

# Mostrar logs recentes
Write-Log "Logs recentes da aplica√ß√£o:"
docker-compose logs --tail=10 web

Write-Host ""
Write-Host "üéâ TESTE DE DEPLOY CONCLU√çDO!" -ForegroundColor Green
Write-Host "=============================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Resultados:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Docker: ‚úÖ Funcionando" -ForegroundColor Green
Write-Host "‚Ä¢ Docker Compose: ‚úÖ Funcionando" -ForegroundColor Green
Write-Host "‚Ä¢ Build da imagem: ‚úÖ Sucesso" -ForegroundColor Green
Write-Host "‚Ä¢ Banco de dados: ‚úÖ Iniciado" -ForegroundColor Green
Write-Host "‚Ä¢ Aplica√ß√£o web: ‚úÖ Iniciada" -ForegroundColor Green
Write-Host ""
Write-Host "üåê URLs para teste:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Aplica√ß√£o: http://localhost:8000" -ForegroundColor White
Write-Host "‚Ä¢ Health Check: http://localhost:8000/health/" -ForegroundColor White
Write-Host "‚Ä¢ Admin: http://localhost:8000/admin/" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "‚Ä¢ Parar: docker-compose down" -ForegroundColor White
Write-Host "‚Ä¢ Status: docker-compose ps" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è  Para parar os servi√ßos de teste:" -ForegroundColor Yellow
Write-Host "docker-compose down" -ForegroundColor White
