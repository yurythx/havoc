#!/bin/bash

# =============================================================================
# SCRIPT DE INSTALA√á√ÉO AUTOM√ÅTICA - UBUNTU
# Instala Docker, Docker Compose e prepara ambiente para o Havoc
# =============================================================================

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# Verificar se √© Ubuntu
check_ubuntu() {
    if [ ! -f /etc/lsb-release ]; then
        error "Este script √© espec√≠fico para Ubuntu!"
        exit 1
    fi
    
    . /etc/lsb-release
    log "Detectado: $DISTRIB_DESCRIPTION"
    
    # Verificar vers√£o m√≠nima (20.04)
    version=$(echo $DISTRIB_RELEASE | cut -d. -f1)
    if [ "$version" -lt 20 ]; then
        error "Ubuntu 20.04 ou superior √© necess√°rio!"
        exit 1
    fi
    
    success "Sistema operacional compat√≠vel"
}

# Verificar privil√©gios
check_privileges() {
    if [ "$EUID" -eq 0 ]; then
        error "N√£o execute este script como root!"
        error "Execute como usu√°rio normal que tenha acesso sudo"
        exit 1
    fi
    
    # Verificar se tem sudo
    if ! sudo -n true 2>/dev/null; then
        error "Este script precisa de privil√©gios sudo"
        error "Execute: sudo -v"
        exit 1
    fi
    
    success "Privil√©gios verificados"
}

# Verificar recursos do sistema
check_resources() {
    log "Verificando recursos do sistema..."
    
    # Verificar RAM (m√≠nimo 2GB)
    ram_gb=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$ram_gb" -lt 2 ]; then
        warning "RAM dispon√≠vel: ${ram_gb}GB (recomendado: 2GB+)"
    else
        success "RAM: ${ram_gb}GB"
    fi
    
    # Verificar espa√ßo em disco (m√≠nimo 10GB)
    disk_gb=$(df -BG / | awk 'NR==2{print $4}' | sed 's/G//')
    if [ "$disk_gb" -lt 10 ]; then
        warning "Espa√ßo livre: ${disk_gb}GB (recomendado: 10GB+)"
    else
        success "Espa√ßo em disco: ${disk_gb}GB"
    fi
}

# Atualizar sistema
update_system() {
    log "Atualizando sistema..."
    
    sudo apt update
    sudo apt upgrade -y
    
    success "Sistema atualizado"
}

# Instalar depend√™ncias b√°sicas
install_dependencies() {
    log "Instalando depend√™ncias b√°sicas..."
    
    sudo apt install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        git \
        unzip \
        wget \
        htop \
        nano \
        python3 \
        python3-pip
    
    success "Depend√™ncias b√°sicas instaladas"
}

# Remover Docker antigo
remove_old_docker() {
    log "Removendo vers√µes antigas do Docker..."
    
    sudo apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
    
    success "Vers√µes antigas removidas"
}

# Instalar Docker
install_docker() {
    log "Instalando Docker..."
    
    # Adicionar chave GPG
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Adicionar reposit√≥rio
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # Atualizar e instalar
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    success "Docker instalado"
}

# Instalar Docker Compose
install_docker_compose() {
    log "Instalando Docker Compose..."
    
    # Baixar vers√£o mais recente
    DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
    
    sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    
    # Dar permiss√£o
    sudo chmod +x /usr/local/bin/docker-compose
    
    # Criar link simb√≥lico
    sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    success "Docker Compose instalado (vers√£o: $DOCKER_COMPOSE_VERSION)"
}

# Configurar usu√°rio Docker
configure_docker_user() {
    log "Configurando usu√°rio para Docker..."
    
    # Adicionar usu√°rio ao grupo docker
    sudo usermod -aG docker $USER
    
    success "Usu√°rio adicionado ao grupo docker"
    warning "Voc√™ precisa fazer logout/login ou executar: newgrp docker"
}

# Configurar firewall
configure_firewall() {
    log "Configurando firewall b√°sico..."
    
    # Instalar UFW se n√£o estiver instalado
    sudo apt install -y ufw
    
    # Configurar regras b√°sicas
    sudo ufw --force reset
    sudo ufw default deny incoming
    sudo ufw default allow outgoing
    sudo ufw allow ssh
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 8000/tcp
    
    # Ativar firewall
    sudo ufw --force enable
    
    success "Firewall configurado"
}

# Verificar instala√ß√£o
verify_installation() {
    log "Verificando instala√ß√£o..."
    
    # Verificar Docker
    if command -v docker >/dev/null 2>&1; then
        DOCKER_VERSION=$(docker --version)
        success "Docker: $DOCKER_VERSION"
    else
        error "Docker n√£o foi instalado corretamente"
        return 1
    fi
    
    # Verificar Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_VERSION=$(docker-compose --version)
        success "Docker Compose: $COMPOSE_VERSION"
    else
        error "Docker Compose n√£o foi instalado corretamente"
        return 1
    fi
    
    # Testar Docker (pode falhar se usu√°rio n√£o fez logout/login)
    if docker run hello-world >/dev/null 2>&1; then
        success "Docker est√° funcionando"
    else
        warning "Docker instalado mas precisa de logout/login para funcionar"
        info "Execute: newgrp docker"
    fi
}

# Criar estrutura de diret√≥rios
create_directories() {
    log "Criando estrutura de diret√≥rios..."
    
    mkdir -p ~/havoc-deploy/{logs,media,staticfiles,backups}
    
    success "Diret√≥rios criados em ~/havoc-deploy/"
}

# Mostrar informa√ß√µes finais
show_final_info() {
    echo ""
    echo "üéâ INSTALA√á√ÉO CONCLU√çDA!"
    echo "======================="
    echo ""
    echo "‚úÖ Componentes instalados:"
    echo "‚Ä¢ Docker Engine"
    echo "‚Ä¢ Docker Compose"
    echo "‚Ä¢ Depend√™ncias do sistema"
    echo "‚Ä¢ Firewall configurado"
    echo ""
    echo "üìã Pr√≥ximos passos:"
    echo "1. Fazer logout/login ou executar: newgrp docker"
    echo "2. Transferir projeto Havoc para o servidor"
    echo "3. Configurar arquivo .env"
    echo "4. Executar deploy: ./deploy.sh deploy"
    echo ""
    echo "üìÅ Estrutura criada:"
    echo "‚Ä¢ ~/havoc-deploy/ - Diret√≥rio para o projeto"
    echo ""
    echo "üîß Comandos √∫teis:"
    echo "‚Ä¢ Verificar Docker: docker --version"
    echo "‚Ä¢ Testar Docker: docker run hello-world"
    echo "‚Ä¢ Status firewall: sudo ufw status"
    echo ""
    echo "üìñ Documenta√ß√£o completa: DEPLOY_UBUNTU.md"
    echo ""
}

# Menu principal
main() {
    echo "üêß INSTALA√á√ÉO AUTOM√ÅTICA - UBUNTU"
    echo "=================================="
    echo ""
    echo "Este script ir√° instalar:"
    echo "‚Ä¢ Docker Engine"
    echo "‚Ä¢ Docker Compose"
    echo "‚Ä¢ Depend√™ncias necess√°rias"
    echo "‚Ä¢ Configura√ß√£o b√°sica de firewall"
    echo ""
    
    read -p "Continuar com a instala√ß√£o? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Instala√ß√£o cancelada."
        exit 0
    fi
    
    echo ""
    log "Iniciando instala√ß√£o..."
    
    # Executar verifica√ß√µes e instala√ß√£o
    check_ubuntu
    check_privileges
    check_resources
    update_system
    install_dependencies
    remove_old_docker
    install_docker
    install_docker_compose
    configure_docker_user
    configure_firewall
    create_directories
    verify_installation
    show_final_info
    
    echo ""
    success "Instala√ß√£o conclu√≠da com sucesso!"
    echo ""
    warning "IMPORTANTE: Execute 'newgrp docker' ou fa√ßa logout/login antes de usar o Docker"
}

# Verificar argumentos
case "${1:-}" in
    "--help"|"-h")
        echo "Uso: $0 [op√ß√µes]"
        echo ""
        echo "Op√ß√µes:"
        echo "  --help, -h     Mostrar esta ajuda"
        echo "  --check        Apenas verificar sistema"
        echo ""
        echo "Este script instala Docker e Docker Compose no Ubuntu"
        exit 0
        ;;
    "--check")
        check_ubuntu
        check_privileges
        check_resources
        verify_installation 2>/dev/null || true
        exit 0
        ;;
    "")
        main
        ;;
    *)
        error "Op√ß√£o inv√°lida: $1"
        echo "Use --help para ver op√ß√µes dispon√≠veis"
        exit 1
        ;;
esac
