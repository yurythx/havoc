#!/bin/bash

# =============================================================================
# SCRIPT DE DEPLOY AUTOMATIZADO - PROJETO HAVOC
# Deploy inteligente que detecta o ambiente e executa a melhor estrat√©gia
# =============================================================================

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# Banner
show_banner() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üöÄ HAVOC AUTO DEPLOY üöÄ                   ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  Deploy Automatizado Inteligente para Container Ubuntu       ‚ïë"
    echo "‚ïë  Detecta ambiente e executa a melhor estrat√©gia             ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo ""
}

# Fun√ß√£o para detectar ambiente
detect_environment() {
    log "Detectando ambiente de execu√ß√£o..."
    
    # Verificar se √© container
    if [ -f /.dockerenv ]; then
        ENVIRONMENT="container"
        info "Ambiente: Container Docker"
        return
    fi
    
    # Verificar se Docker est√° dispon√≠vel
    if command -v docker >/dev/null 2>&1 && command -v docker-compose >/dev/null 2>&1; then
        ENVIRONMENT="docker"
        info "Ambiente: Docker dispon√≠vel"
        return
    fi
    
    # Verificar se √© Ubuntu
    if [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        if [[ "$DISTRIB_ID" == "Ubuntu" ]]; then
            ENVIRONMENT="ubuntu"
            info "Ambiente: Ubuntu $DISTRIB_RELEASE"
            return
        fi
    fi
    
    # Verificar se √© Linux gen√©rico
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        ENVIRONMENT="linux"
        info "Ambiente: Linux gen√©rico"
        return
    fi
    
    # Verificar se √© Windows (WSL ou Git Bash)
    if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || grep -q Microsoft /proc/version 2>/dev/null; then
        ENVIRONMENT="windows"
        info "Ambiente: Windows/WSL"
        return
    fi
    
    # Fallback
    ENVIRONMENT="unknown"
    warning "Ambiente n√£o detectado, usando configura√ß√£o gen√©rica"
}

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    log "Verificando pr√©-requisitos..."
    
    case $ENVIRONMENT in
        "docker")
            if ! docker --version >/dev/null 2>&1; then
                error "Docker n√£o est√° funcionando"
                exit 1
            fi
            if ! docker-compose --version >/dev/null 2>&1; then
                error "Docker Compose n√£o est√° funcionando"
                exit 1
            fi
            success "Docker e Docker Compose dispon√≠veis"
            ;;
        "ubuntu"|"linux")
            if ! command -v python3 >/dev/null 2>&1; then
                warning "Python3 n√£o encontrado, ser√° instalado"
            fi
            ;;
        "windows")
            if ! command -v python >/dev/null 2>&1 && ! command -v python3 >/dev/null 2>&1; then
                error "Python n√£o encontrado no Windows"
                exit 1
            fi
            ;;
    esac
}

# Fun√ß√£o para configurar arquivo .env
setup_env_file() {
    log "Configurando arquivo de ambiente..."
    
    if [ ! -f .env ]; then
        if [ -f .env.example ]; then
            cp .env.example .env
            success "Arquivo .env criado a partir do .env.example"
        else
            # Criar .env b√°sico
            cat > .env << 'EOF'
# Configura√ß√£o b√°sica gerada automaticamente
ENVIRONMENT=development
DEBUG=True
DJANGO_SECRET_KEY=django-insecure-auto-generated-change-in-production
ALLOWED_HOSTS=localhost,127.0.0.1
DATABASE_ENGINE=sqlite
DATABASE_NAME=db.sqlite3
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EOF
            success "Arquivo .env b√°sico criado"
        fi
        
        warning "IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes antes do deploy em produ√ß√£o"
    else
        info "Arquivo .env j√° existe"
    fi
}

# Deploy via Docker
deploy_docker() {
    log "Executando deploy via Docker..."
    
    # Verificar se docker-compose.yml existe
    if [ ! -f docker-compose.yml ]; then
        error "Arquivo docker-compose.yml n√£o encontrado"
        exit 1
    fi
    
    # Build e deploy
    log "Construindo imagens..."
    docker-compose build
    
    log "Iniciando servi√ßos..."
    docker-compose up -d
    
    log "Aguardando servi√ßos ficarem prontos..."
    sleep 30
    
    # Verificar health check
    if curl -f http://localhost:8000/health/ >/dev/null 2>&1; then
        success "Aplica√ß√£o est√° funcionando!"
    else
        warning "Health check falhou, mas servi√ßos podem estar iniciando"
    fi
    
    # Mostrar status
    docker-compose ps
}

# Deploy via Ubuntu
deploy_ubuntu() {
    log "Executando deploy via Ubuntu..."
    
    if [ -f scripts/deploy_ubuntu.sh ]; then
        chmod +x scripts/deploy_ubuntu.sh
        cd scripts
        ./deploy_ubuntu.sh dev
        cd ..
    else
        error "Script deploy_ubuntu.sh n√£o encontrado"
        exit 1
    fi
}

# Deploy via Linux gen√©rico
deploy_linux() {
    log "Executando deploy via Linux..."
    
    if [ -f scripts/deploy_melhorado.sh ]; then
        chmod +x scripts/deploy_melhorado.sh
        cd scripts
        ./deploy_melhorado.sh dev
        cd ..
    else
        error "Script deploy_melhorado.sh n√£o encontrado"
        exit 1
    fi
}

# Deploy via Windows
deploy_windows() {
    log "Executando deploy via Windows..."
    
    if [ -f scripts/deploy_simples.ps1 ]; then
        info "Execute o seguinte comando no PowerShell:"
        echo "cd scripts"
        echo ".\\deploy_simples.ps1 dev"
    else
        error "Script deploy_simples.ps1 n√£o encontrado"
        exit 1
    fi
}

# Fun√ß√£o principal de deploy
execute_deploy() {
    case $ENVIRONMENT in
        "docker")
            deploy_docker
            ;;
        "ubuntu")
            deploy_ubuntu
            ;;
        "linux")
            deploy_linux
            ;;
        "windows")
            deploy_windows
            ;;
        "container")
            info "Executando dentro de container, nada a fazer"
            ;;
        *)
            error "Ambiente n√£o suportado: $ENVIRONMENT"
            exit 1
            ;;
    esac
}

# Fun√ß√£o para mostrar informa√ß√µes p√≥s-deploy
show_post_deploy_info() {
    echo ""
    success "üéâ Deploy automatizado conclu√≠do!"
    echo ""
    info "üìã Informa√ß√µes de acesso:"
    echo "‚Ä¢ URL Principal: http://localhost:8000"
    echo "‚Ä¢ Admin Django: http://localhost:8000/admin/"
    echo "‚Ä¢ Health Check: http://localhost:8000/health/"
    echo ""
    info "üîë Credenciais padr√£o:"
    echo "‚Ä¢ Usu√°rio: admin@havoc.com"
    echo "‚Ä¢ Senha: admin123"
    echo ""
    
    case $ENVIRONMENT in
        "docker")
            info "üê≥ Comandos Docker √∫teis:"
            echo "‚Ä¢ Ver logs: docker-compose logs -f"
            echo "‚Ä¢ Parar: docker-compose down"
            echo "‚Ä¢ Status: docker-compose ps"
            ;;
        "ubuntu"|"linux")
            info "üêß Comandos √∫teis:"
            echo "‚Ä¢ Ver logs: tail -f logs/django.log"
            echo "‚Ä¢ Parar: Ctrl+C no terminal do servidor"
            echo "‚Ä¢ Reativar env: source env/bin/activate"
            ;;
    esac
    
    echo ""
    warning "‚ö†Ô∏è  Para produ√ß√£o, lembre-se de:"
    echo "‚Ä¢ Configurar SECRET_KEY segura no .env"
    echo "‚Ä¢ Configurar banco PostgreSQL"
    echo "‚Ä¢ Configurar HTTPS"
    echo "‚Ä¢ Configurar backup autom√°tico"
}

# Fun√ß√£o de ajuda
show_help() {
    echo "üöÄ HAVOC AUTO DEPLOY"
    echo "===================="
    echo ""
    echo "Deploy automatizado inteligente que detecta o ambiente e executa a melhor estrat√©gia."
    echo ""
    echo "Uso: $0 [op√ß√µes]"
    echo ""
    echo "Op√ß√µes:"
    echo "  --help, -h     Mostra esta ajuda"
    echo "  --env-only     Apenas configura arquivo .env"
    echo "  --check        Apenas verifica pr√©-requisitos"
    echo "  --force-env    For√ßa detec√ß√£o de ambiente espec√≠fico"
    echo "                 Valores: docker, ubuntu, linux, windows"
    echo ""
    echo "Exemplos:"
    echo "  $0                    # Deploy autom√°tico"
    echo "  $0 --check           # Apenas verificar sistema"
    echo "  $0 --force-env docker # For√ßar deploy via Docker"
    echo ""
}

# Fun√ß√£o principal
main() {
    # Processar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --env-only)
                setup_env_file
                exit 0
                ;;
            --check)
                show_banner
                detect_environment
                check_prerequisites
                success "Sistema verificado com sucesso!"
                exit 0
                ;;
            --force-env)
                ENVIRONMENT="$2"
                shift 2
                ;;
            *)
                error "Op√ß√£o desconhecida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Executar deploy
    show_banner
    
    # Detectar ambiente se n√£o foi for√ßado
    if [ -z "$ENVIRONMENT" ]; then
        detect_environment
    else
        info "Ambiente for√ßado: $ENVIRONMENT"
    fi
    
    check_prerequisites
    setup_env_file
    execute_deploy
    show_post_deploy_info
}

# Executar fun√ß√£o principal
main "$@"
