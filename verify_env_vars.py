#!/usr/bin/env python
"""
Script para verificar se todas as vari√°veis de ambiente necess√°rias est√£o configuradas
"""
import os
import subprocess
from pathlib import Path

def check_env_file_vars(file_path):
    """Verifica vari√°veis em arquivo .env"""
    if not Path(file_path).exists():
        print(f"‚ùå {file_path} n√£o encontrado")
        return {}
    
    print(f"\nüìÑ Verificando {file_path}:")
    
    vars_found = {}
    with open(file_path, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f, 1):
            line = line.strip()
            if '=' in line and not line.startswith('#'):
                key, value = line.split('=', 1)
                vars_found[key] = value
                
                # Verificar vari√°veis cr√≠ticas
                if key in ['DJANGO_SECRET_KEY', 'SECRET_KEY']:
                    if 'django-insecure' in value:
                        print(f"   ‚ö†Ô∏è  {key}: Usando chave insegura (linha {line_num})")
                    else:
                        print(f"   ‚úÖ {key}: Configurado com chave segura")
                elif key in ['DB_PASSWORD', 'DATABASE_PASSWORD']:
                    if len(value) < 8:
                        print(f"   ‚ö†Ô∏è  {key}: Senha muito simples (linha {line_num})")
                    else:
                        print(f"   ‚úÖ {key}: Configurado")
                elif key in ['DEBUG']:
                    print(f"   üìã {key}: {value}")
                elif key in ['ENVIRONMENT']:
                    print(f"   üìã {key}: {value}")
    
    return vars_found

def check_docker_compose_env():
    """Verifica vari√°veis no docker-compose.yml"""
    if not Path('docker-compose.yml').exists():
        print("‚ùå docker-compose.yml n√£o encontrado")
        return []
    
    print(f"\nüê≥ Verificando vari√°veis no docker-compose.yml:")
    
    try:
        result = subprocess.run(['docker-compose', 'config'], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ùå Erro ao ler docker-compose: {result.stderr}")
            return []
        
        # Procurar por vari√°veis de ambiente no output
        env_vars = []
        lines = result.stdout.split('\n')
        in_env_section = False
        
        for line in lines:
            if 'environment:' in line:
                in_env_section = True
                continue
            elif in_env_section:
                if line.strip().startswith('- '):
                    var_line = line.strip()[2:]  # Remove '- '
                    env_vars.append(var_line)
                    
                    # Verificar vari√°veis cr√≠ticas
                    if 'DJANGO_SECRET_KEY' in var_line:
                        print(f"   ‚úÖ DJANGO_SECRET_KEY: Configurado")
                    elif 'SECRET_KEY' in var_line:
                        print(f"   ‚úÖ SECRET_KEY: Configurado")
                    elif 'DATABASE_' in var_line or 'DB_' in var_line:
                        print(f"   üìã {var_line}")
                elif not line.strip().startswith('-') and line.strip():
                    in_env_section = False
        
        return env_vars
        
    except FileNotFoundError:
        print("‚ùå Docker Compose n√£o encontrado")
        return []
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return []

def check_critical_vars():
    """Verifica se vari√°veis cr√≠ticas est√£o definidas"""
    print(f"\nüîç Verificando vari√°veis cr√≠ticas:")
    
    critical_vars = [
        'DJANGO_SECRET_KEY',
        'SECRET_KEY',
        'DATABASE_ENGINE',
        'DB_NAME',
        'DB_USER',
        'DB_PASSWORD',
        'ALLOWED_HOSTS',
    ]
    
    # Verificar em .env.docker (usado pelo container)
    env_docker_vars = {}
    if Path('.env.docker').exists():
        with open('.env.docker', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    env_docker_vars[key] = value
    
    missing_vars = []
    for var in critical_vars:
        if var in env_docker_vars:
            print(f"   ‚úÖ {var}: Definido")
        else:
            print(f"   ‚ùå {var}: N√ÉO DEFINIDO")
            missing_vars.append(var)
    
    return missing_vars

def show_recommendations():
    """Mostra recomenda√ß√µes de seguran√ßa"""
    print(f"\nüí° RECOMENDA√á√ïES DE SEGURAN√áA:")
    print(f"   üîê SECRET_KEY:")
    print(f"      ‚Ä¢ Use chaves geradas com get_random_secret_key()")
    print(f"      ‚Ä¢ Nunca use chaves que contenham 'django-insecure'")
    print(f"      ‚Ä¢ Mantenha a chave secreta e √∫nica por ambiente")
    print(f"   ")
    print(f"   üîí Senhas:")
    print(f"      ‚Ä¢ Use senhas com pelo menos 12 caracteres")
    print(f"      ‚Ä¢ Inclua letras, n√∫meros e s√≠mbolos")
    print(f"      ‚Ä¢ Nunca use senhas padr√£o em produ√ß√£o")
    print(f"   ")
    print(f"   üåê Hosts:")
    print(f"      ‚Ä¢ Configure ALLOWED_HOSTS com dom√≠nios espec√≠ficos")
    print(f"      ‚Ä¢ Use CSRF_TRUSTED_ORIGINS para origens confi√°veis")
    print(f"      ‚Ä¢ Evite usar '*' em produ√ß√£o")

def main():
    """Fun√ß√£o principal"""
    print("üîç VERIFICA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE - HAVOC")
    print("=" * 55)
    
    # Verificar arquivos .env
    env_vars = check_env_file_vars('.env')
    env_docker_vars = check_env_file_vars('.env.docker')
    
    # Verificar docker-compose
    compose_vars = check_docker_compose_env()
    
    # Verificar vari√°veis cr√≠ticas
    missing_vars = check_critical_vars()
    
    # Mostrar recomenda√ß√µes
    show_recommendations()
    
    # Resumo final
    print(f"\nüìä RESUMO:")
    print(f"   üìÑ Vari√°veis em .env: {len(env_vars)}")
    print(f"   üìÑ Vari√°veis em .env.docker: {len(env_docker_vars)}")
    print(f"   üê≥ Vari√°veis no docker-compose: {len(compose_vars)}")
    print(f"   ‚ùå Vari√°veis cr√≠ticas faltando: {len(missing_vars)}")
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA:")
        print(f"   Adicione as seguintes vari√°veis ao .env.docker:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}=<valor>")
    else:
        print(f"\n‚úÖ Todas as vari√°veis cr√≠ticas est√£o configuradas!")
    
    print(f"\nüöÄ Para testar o deploy:")
    print(f"   python deploy-auto.py")

if __name__ == '__main__':
    main()
