#!/usr/bin/env python
"""
Script para testar o sistema de verifica√ß√£o por email
"""

import os
import sys
import django
from django.test import Client
from django.contrib.auth import get_user_model
from django.urls import reverse

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from apps.accounts.models import VerificationCode
from apps.accounts.services.registration_service import RegistrationService
from apps.accounts.services.password_service import PasswordService
from apps.accounts.repositories.user_repository import DjangoUserRepository
from apps.accounts.repositories.verification_repository import DjangoVerificationRepository
from apps.accounts.notifications.email_notification import EmailNotificationService

User = get_user_model()

def test_registration_email_verification():
    """Testa o sistema de verifica√ß√£o por email no registro"""
    print("üß™ TESTANDO SISTEMA DE VERIFICA√á√ÉO POR EMAIL")
    print("=" * 60)
    
    # Limpar dados de teste anteriores
    test_email = "teste.verificacao@example.com"
    User.objects.filter(email=test_email).delete()
    VerificationCode.objects.filter(user__email=test_email).delete()
    
    print(f"üìß Testando registro com email: {test_email}")
    
    # 1. Testar registro de usu√°rio
    print("\n1Ô∏è‚É£ TESTE DE REGISTRO")
    print("-" * 30)
    
    service = RegistrationService(
        user_repository=DjangoUserRepository(),
        verification_repository=DjangoVerificationRepository(),
        notification_service=EmailNotificationService()
    )
    
    try:
        user = service.register_user(
            email=test_email,
            password="senha123456",
            first_name="Teste",
            last_name="Verifica√ß√£o",
            username="teste_verificacao"
        )
        
        print(f"‚úÖ Usu√°rio criado: {user.email}")
        print(f"‚úÖ Verificado: {user.is_verified}")
        
        # Verificar se c√≥digo foi criado
        verification_codes = VerificationCode.objects.filter(
            user=user,
            code_type=VerificationCode.REGISTRATION
        )
        
        if verification_codes.exists():
            code = verification_codes.first()
            print(f"‚úÖ C√≥digo de verifica√ß√£o criado: {code.code}")
            print(f"‚úÖ Tipo: {code.get_code_type_display()}")
            print(f"‚úÖ Expira em: {code.expires_at}")
            print(f"‚úÖ Expirado: {code.is_expired()}")
            
            # 2. Testar confirma√ß√£o do registro
            print("\n2Ô∏è‚É£ TESTE DE CONFIRMA√á√ÉO")
            print("-" * 30)
            
            # Testar c√≥digo correto
            if service.confirm_registration(test_email, code.code):
                print("‚úÖ Confirma√ß√£o com c√≥digo correto: SUCESSO")
                
                # Verificar se usu√°rio foi verificado
                user.refresh_from_db()
                print(f"‚úÖ Usu√°rio verificado ap√≥s confirma√ß√£o: {user.is_verified}")
                
                # Verificar se c√≥digo foi removido
                remaining_codes = VerificationCode.objects.filter(
                    user=user,
                    code_type=VerificationCode.REGISTRATION
                ).count()
                print(f"‚úÖ C√≥digos restantes ap√≥s confirma√ß√£o: {remaining_codes}")
                
            else:
                print("‚ùå Confirma√ß√£o com c√≥digo correto: FALHOU")
            
            # Testar c√≥digo incorreto
            if not service.confirm_registration(test_email, "999999"):
                print("‚úÖ Confirma√ß√£o com c√≥digo incorreto: REJEITADA (correto)")
            else:
                print("‚ùå Confirma√ß√£o com c√≥digo incorreto: ACEITA (erro)")
                
        else:
            print("‚ùå C√≥digo de verifica√ß√£o N√ÉO foi criado")
            
    except Exception as e:
        print(f"‚ùå Erro no registro: {e}")
    
    print("\n" + "=" * 60)

def test_password_reset_email_verification():
    """Testa o sistema de verifica√ß√£o por email na recupera√ß√£o de senha"""
    print("\nüîí TESTANDO RECUPERA√á√ÉO DE SENHA POR EMAIL")
    print("=" * 60)
    
    test_email = "teste.senha@example.com"
    
    # Criar usu√°rio verificado para teste
    User.objects.filter(email=test_email).delete()
    user = User.objects.create_user(
        email=test_email,
        password="senha_antiga",
        first_name="Teste",
        last_name="Senha",
        username="teste_senha",
        is_verified=True
    )
    
    print(f"üìß Testando recupera√ß√£o para: {test_email}")
    
    # 1. Testar solicita√ß√£o de reset
    print("\n1Ô∏è‚É£ TESTE DE SOLICITA√á√ÉO DE RESET")
    print("-" * 40)
    
    password_service = PasswordService(
        user_repository=DjangoUserRepository(),
        verification_repository=DjangoVerificationRepository(),
        notification_service=EmailNotificationService()
    )
    
    try:
        if password_service.request_password_reset(test_email):
            print("‚úÖ Solicita√ß√£o de reset: SUCESSO")
            
            # Verificar se c√≥digo foi criado
            verification_codes = VerificationCode.objects.filter(
                user=user,
                code_type=VerificationCode.PASSWORD_RESET
            )
            
            if verification_codes.exists():
                code = verification_codes.first()
                print(f"‚úÖ C√≥digo de reset criado: {code.code}")
                print(f"‚úÖ Tipo: {code.get_code_type_display()}")
                print(f"‚úÖ Expira em: {code.expires_at}")
                
                # 2. Testar confirma√ß√£o do reset
                print("\n2Ô∏è‚É£ TESTE DE CONFIRMA√á√ÉO DE RESET")
                print("-" * 40)
                
                new_password = "nova_senha_123"
                
                # Testar c√≥digo correto
                if password_service.confirm_password_reset(test_email, code.code, new_password):
                    print("‚úÖ Reset com c√≥digo correto: SUCESSO")
                    
                    # Verificar se senha foi alterada
                    user.refresh_from_db()
                    if user.check_password(new_password):
                        print("‚úÖ Senha foi alterada corretamente")
                    else:
                        print("‚ùå Senha N√ÉO foi alterada")
                    
                    # Verificar se c√≥digo foi removido
                    remaining_codes = VerificationCode.objects.filter(
                        user=user,
                        code_type=VerificationCode.PASSWORD_RESET
                    ).count()
                    print(f"‚úÖ C√≥digos restantes ap√≥s reset: {remaining_codes}")
                    
                else:
                    print("‚ùå Reset com c√≥digo correto: FALHOU")
                
                # Testar c√≥digo incorreto (criar novo c√≥digo primeiro)
                password_service.request_password_reset(test_email)
                if not password_service.confirm_password_reset(test_email, "999999", "outra_senha"):
                    print("‚úÖ Reset com c√≥digo incorreto: REJEITADO (correto)")
                else:
                    print("‚ùå Reset com c√≥digo incorreto: ACEITO (erro)")
                    
            else:
                print("‚ùå C√≥digo de reset N√ÉO foi criado")
                
        else:
            print("‚ùå Solicita√ß√£o de reset: FALHOU")
            
    except Exception as e:
        print(f"‚ùå Erro no reset de senha: {e}")
    
    print("\n" + "=" * 60)

def test_code_generation():
    """Testa a gera√ß√£o de c√≥digos de 6 d√≠gitos"""
    print("\nüî¢ TESTANDO GERA√á√ÉO DE C√ìDIGOS")
    print("=" * 60)
    
    repo = DjangoVerificationRepository()
    
    # Criar usu√°rio de teste
    test_user = User.objects.create_user(
        email="teste.codigo@example.com",
        password="senha123",
        username="teste_codigo"
    )
    
    print("Gerando 10 c√≥digos para verificar formato...")
    
    for i in range(10):
        code = repo.create_verification_code(test_user, VerificationCode.REGISTRATION)
        
        # Verificar se √© um c√≥digo de 6 d√≠gitos
        is_6_digits = len(code) == 6 and code.isdigit()
        is_valid_range = 100000 <= int(code) <= 999999
        
        print(f"C√≥digo {i+1}: {code} - 6 d√≠gitos: {is_6_digits} - Range v√°lido: {is_valid_range}")
        
        if not (is_6_digits and is_valid_range):
            print(f"‚ùå C√≥digo inv√°lido: {code}")
            break
    else:
        print("‚úÖ Todos os c√≥digos s√£o v√°lidos (6 d√≠gitos)")
    
    # Limpar
    test_user.delete()
    
    print("\n" + "=" * 60)

def test_email_templates():
    """Testa se os templates de email existem e est√£o corretos"""
    print("\nüìß TESTANDO TEMPLATES DE EMAIL")
    print("=" * 60)
    
    from django.template.loader import get_template
    from django.template import Context
    
    templates_to_test = [
        ('accounts/emails/registration_confirmation.html', 'Confirma√ß√£o de Registro'),
        ('accounts/emails/password_reset.html', 'Reset de Senha'),
    ]
    
    test_context = {
        'email': 'teste@example.com',
        'code': '123456',
        'site_name': 'HAVOC'
    }
    
    for template_path, description in templates_to_test:
        try:
            template = get_template(template_path)
            rendered = template.render(test_context)
            
            # Verificar se o c√≥digo aparece no template
            if '123456' in rendered:
                print(f"‚úÖ {description}: Template OK - C√≥digo aparece no email")
            else:
                print(f"‚ùå {description}: Template OK - C√≥digo N√ÉO aparece no email")
                
            # Verificar se tem elementos essenciais
            has_code_display = 'code' in rendered.lower()
            has_instructions = any(word in rendered.lower() for word in ['digite', 'use', 'c√≥digo'])
            
            print(f"   - Exibe c√≥digo: {has_code_display}")
            print(f"   - Tem instru√ß√µes: {has_instructions}")
            
        except Exception as e:
            print(f"‚ùå {description}: Erro ao carregar template - {e}")
    
    print("\n" + "=" * 60)

if __name__ == '__main__':
    print("üöÄ INICIANDO TESTES DO SISTEMA DE VERIFICA√á√ÉO POR EMAIL")
    print("=" * 80)
    
    # Executar todos os testes
    test_code_generation()
    test_email_templates()
    test_registration_email_verification()
    test_password_reset_email_verification()
    
    print("\nüéØ TESTES CONCLU√çDOS!")
    print("=" * 80)
