# =============================================================================
# SCRIPT DE DEPLOY AUTOMATIZADO WINDOWS - PROJETO HAVOC
# Deploy inteligente que detecta o ambiente e executa a melhor estrat√©gia
# =============================================================================

param(
    [string]$Command = "auto",
    [string]$ForceEnv = "",
    [switch]$EnvOnly = $false,
    [switch]$Check = $false,
    [switch]$Help = $false
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"

# Fun√ß√£o para logging com cores
function Write-Log {
    param($Message, $Color = "Cyan")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Warning {
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Info {
    param($Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

# Banner
function Show-Banner {
    Write-Host ""
    Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Magenta
    Write-Host "‚ïë                    üöÄ HAVOC AUTO DEPLOY üöÄ                   ‚ïë" -ForegroundColor Magenta
    Write-Host "‚ïë                                                              ‚ïë" -ForegroundColor Magenta
    Write-Host "‚ïë  Deploy Automatizado Inteligente para Windows               ‚ïë" -ForegroundColor Magenta
    Write-Host "‚ïë  Detecta ambiente e executa a melhor estrat√©gia             ‚ïë" -ForegroundColor Magenta
    Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Magenta
    Write-Host ""
}

# Fun√ß√£o para detectar ambiente
function Detect-Environment {
    Write-Log "Detectando ambiente de execu√ß√£o..."
    
    # Verificar se Docker est√° dispon√≠vel
    try {
        $dockerVersion = docker --version 2>$null
        $composeVersion = docker-compose --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            $script:Environment = "docker"
            Write-Info "Ambiente: Docker dispon√≠vel"
            return
        }
    } catch {
        # Docker n√£o dispon√≠vel
    }
    
    # Verificar se Python est√° dispon√≠vel
    try {
        $pythonVersion = python --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            $script:Environment = "python"
            Write-Info "Ambiente: Python dispon√≠vel"
            return
        }
    } catch {
        # Python n√£o dispon√≠vel
    }
    
    # Fallback para Windows
    $script:Environment = "windows"
    Write-Info "Ambiente: Windows PowerShell"
}

# Fun√ß√£o para verificar pr√©-requisitos
function Test-Prerequisites {
    Write-Log "Verificando pr√©-requisitos..."
    
    switch ($script:Environment) {
        "docker" {
            try {
                docker --version | Out-Null
                docker-compose --version | Out-Null
                Write-Success "Docker e Docker Compose dispon√≠veis"
            } catch {
                Write-Error "Docker n√£o est√° funcionando corretamente"
                exit 1
            }
        }
        "python" {
            try {
                python --version | Out-Null
                Write-Success "Python dispon√≠vel"
            } catch {
                Write-Error "Python n√£o est√° funcionando corretamente"
                exit 1
            }
        }
        "windows" {
            if (!(Test-Path "scripts\deploy_simples.ps1")) {
                Write-Error "Script deploy_simples.ps1 n√£o encontrado"
                exit 1
            }
            Write-Success "Scripts PowerShell dispon√≠veis"
        }
    }
}

# Fun√ß√£o para configurar arquivo .env
function Setup-EnvFile {
    Write-Log "Configurando arquivo de ambiente..."
    
    if (!(Test-Path ".env")) {
        if (Test-Path ".env.example") {
            Copy-Item ".env.example" ".env"
            Write-Success "Arquivo .env criado a partir do .env.example"
        } else {
            # Criar .env b√°sico
            $envContent = @"
# Configura√ß√£o b√°sica gerada automaticamente
ENVIRONMENT=development
DEBUG=True
DJANGO_SECRET_KEY=django-insecure-auto-generated-change-in-production
ALLOWED_HOSTS=localhost,127.0.0.1
DATABASE_ENGINE=sqlite
DATABASE_NAME=db.sqlite3
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
"@
            $envContent | Out-File -FilePath ".env" -Encoding UTF8
            Write-Success "Arquivo .env b√°sico criado"
        }
        
        Write-Warning "IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes antes do deploy em produ√ß√£o"
    } else {
        Write-Info "Arquivo .env j√° existe"
    }
}

# Deploy via Docker
function Deploy-Docker {
    Write-Log "Executando deploy via Docker..."
    
    if (!(Test-Path "docker-compose.yml")) {
        Write-Error "Arquivo docker-compose.yml n√£o encontrado"
        exit 1
    }
    
    Write-Log "Construindo imagens..."
    docker-compose build
    
    Write-Log "Iniciando servi√ßos..."
    docker-compose up -d
    
    Write-Log "Aguardando servi√ßos ficarem prontos..."
    Start-Sleep -Seconds 30
    
    # Verificar health check
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8000/health/" -TimeoutSec 10 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Success "Aplica√ß√£o est√° funcionando!"
        }
    } catch {
        Write-Warning "Health check falhou, mas servi√ßos podem estar iniciando"
    }
    
    # Mostrar status
    docker-compose ps
}

# Deploy via Python
function Deploy-Python {
    Write-Log "Executando deploy via Python..."
    
    if (Test-Path "scripts\deploy_simples.ps1") {
        Set-Location "scripts"
        .\deploy_simples.ps1 dev
        Set-Location ".."
    } else {
        Write-Error "Script deploy_simples.ps1 n√£o encontrado"
        exit 1
    }
}

# Deploy via Windows
function Deploy-Windows {
    Write-Log "Executando deploy via Windows PowerShell..."
    
    if (Test-Path "scripts\deploy_simples.ps1") {
        Set-Location "scripts"
        .\deploy_simples.ps1 dev
        Set-Location ".."
    } else {
        Write-Error "Script deploy_simples.ps1 n√£o encontrado"
        exit 1
    }
}

# Fun√ß√£o principal de deploy
function Invoke-Deploy {
    switch ($script:Environment) {
        "docker" {
            Deploy-Docker
        }
        "python" {
            Deploy-Python
        }
        "windows" {
            Deploy-Windows
        }
        default {
            Write-Error "Ambiente n√£o suportado: $($script:Environment)"
            exit 1
        }
    }
}

# Fun√ß√£o para mostrar informa√ß√µes p√≥s-deploy
function Show-PostDeployInfo {
    Write-Host ""
    Write-Success "üéâ Deploy automatizado conclu√≠do!"
    Write-Host ""
    Write-Info "üìã Informa√ß√µes de acesso:"
    Write-Host "‚Ä¢ URL Principal: http://localhost:8000"
    Write-Host "‚Ä¢ Admin Django: http://localhost:8000/admin/"
    Write-Host "‚Ä¢ Health Check: http://localhost:8000/health/"
    Write-Host ""
    Write-Info "üîë Credenciais padr√£o:"
    Write-Host "‚Ä¢ Usu√°rio: admin@havoc.com"
    Write-Host "‚Ä¢ Senha: admin123"
    Write-Host ""
    
    switch ($script:Environment) {
        "docker" {
            Write-Info "üê≥ Comandos Docker √∫teis:"
            Write-Host "‚Ä¢ Ver logs: docker-compose logs -f"
            Write-Host "‚Ä¢ Parar: docker-compose down"
            Write-Host "‚Ä¢ Status: docker-compose ps"
        }
        default {
            Write-Info "üíª Comandos √∫teis:"
            Write-Host "‚Ä¢ Verificar: .\scripts\deploy_simples.ps1 check"
            Write-Host "‚Ä¢ Limpar: .\scripts\deploy_simples.ps1 clean"
            Write-Host "‚Ä¢ Reativar env: .\env\Scripts\Activate.ps1"
        }
    }
    
    Write-Host ""
    Write-Warning "‚ö†Ô∏è  Para produ√ß√£o, lembre-se de:"
    Write-Host "‚Ä¢ Configurar SECRET_KEY segura no .env"
    Write-Host "‚Ä¢ Configurar banco PostgreSQL"
    Write-Host "‚Ä¢ Configurar HTTPS"
    Write-Host "‚Ä¢ Configurar backup autom√°tico"
}

# Fun√ß√£o de ajuda
function Show-Help {
    Write-Host "üöÄ HAVOC AUTO DEPLOY - WINDOWS"
    Write-Host "=============================="
    Write-Host ""
    Write-Host "Deploy automatizado inteligente que detecta o ambiente e executa a melhor estrat√©gia."
    Write-Host ""
    Write-Host "Uso: .\deploy-auto.ps1 [op√ß√µes]"
    Write-Host ""
    Write-Host "Op√ß√µes:"
    Write-Host "  -Help              Mostra esta ajuda"
    Write-Host "  -EnvOnly           Apenas configura arquivo .env"
    Write-Host "  -Check             Apenas verifica pr√©-requisitos"
    Write-Host "  -ForceEnv <env>    For√ßa detec√ß√£o de ambiente espec√≠fico"
    Write-Host "                     Valores: docker, python, windows"
    Write-Host ""
    Write-Host "Exemplos:"
    Write-Host "  .\deploy-auto.ps1                    # Deploy autom√°tico"
    Write-Host "  .\deploy-auto.ps1 -Check             # Apenas verificar sistema"
    Write-Host "  .\deploy-auto.ps1 -ForceEnv docker   # For√ßar deploy via Docker"
    Write-Host ""
}

# Fun√ß√£o principal
function Main {
    # Processar argumentos
    if ($Help) {
        Show-Help
        return
    }
    
    if ($EnvOnly) {
        Setup-EnvFile
        return
    }
    
    if ($Check) {
        Show-Banner
        if ($ForceEnv) {
            $script:Environment = $ForceEnv
            Write-Info "Ambiente for√ßado: $($script:Environment)"
        } else {
            Detect-Environment
        }
        Test-Prerequisites
        Write-Success "Sistema verificado com sucesso!"
        return
    }
    
    # Executar deploy
    Show-Banner
    
    # Detectar ambiente se n√£o foi for√ßado
    if ($ForceEnv) {
        $script:Environment = $ForceEnv
        Write-Info "Ambiente for√ßado: $($script:Environment)"
    } else {
        Detect-Environment
    }
    
    Test-Prerequisites
    Setup-EnvFile
    Invoke-Deploy
    Show-PostDeployInfo
}

# Executar fun√ß√£o principal
Main
