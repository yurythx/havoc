"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging
from dotenv import load_dotenv

import dj_database_url


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')


# =============================================================================
# CONFIGURAÇÕES BÁSICAS DO DJANGO
# =============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-dev-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Ambiente de execução
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')

# Hosts permitidos
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver,*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'crispy_forms',
    'crispy_bootstrap5',
    'tinymce',

    # Local apps
    'apps.accounts',
    'apps.config',
    'apps.pages',
    'apps.articles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise para servir arquivos estáticos
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.accounts.middleware.RateLimitMiddleware',
    'apps.accounts.middleware.AccessControlMiddleware',
    'apps.accounts.middleware.SmartRedirectMiddleware',
    'apps.config.middleware.module_middleware.ModuleAccessMiddleware',
    'apps.config.middleware.module_middleware.ModuleContextMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Configurações de Autenticação
AUTH_USER_MODEL = 'accounts.User'
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Backends de Autenticação
AUTHENTICATION_BACKENDS = [
    'apps.accounts.backends.EmailOrUsernameModelBackend',  # Backend principal
    'django.contrib.auth.backends.ModelBackend',  # Backend padrão como fallback
]

# =============================================================================
# CONFIGURAÇÕES DE EMAIL
# =============================================================================

# Configurações dinâmicas de email baseadas em variáveis de ambiente
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_TIMEOUT = int(os.environ.get('EMAIL_TIMEOUT', '30'))
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@havoc.com')
CONTACT_EMAIL = os.environ.get('CONTACT_EMAIL', 'contato@havoc.com')

WSGI_APPLICATION = 'core.wsgi.application'


# =============================================================================
# CONFIGURAÇÕES DE BANCO DE DADOS
# =============================================================================

# Configuração dinâmica de banco de dados baseada em variáveis de ambiente
DATABASE_ENGINE = os.environ.get('DATABASE_ENGINE', 'sqlite')

if DATABASE_ENGINE == 'postgresql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DATABASE_NAME', 'havoc'),
            'USER': os.environ.get('DATABASE_USER', 'havoc_user'),
            'PASSWORD': os.environ.get('DATABASE_PASSWORD', ''),
            'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
            'PORT': os.environ.get('DATABASE_PORT', '5432'),
        }
    }
elif DATABASE_ENGINE == 'mysql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('DATABASE_NAME', 'havoc'),
            'USER': os.environ.get('DATABASE_USER', 'havoc_user'),
            'PASSWORD': os.environ.get('DATABASE_PASSWORD', ''),
            'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
            'PORT': os.environ.get('DATABASE_PORT', '3306'),
        }
    }
else:  # SQLite (padrão)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / os.environ.get('DATABASE_NAME', 'db.sqlite3'),
        }
    }





# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Static files finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_USE_FINDERS = True  # Permite usar finders em desenvolvimento
WHITENOISE_AUTOREFRESH = True  # Auto-refresh em desenvolvimento

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Storage Configuration (Django 4.2+)
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# CONFIGURAÇÕES DE SEGURANÇA
# =============================================================================

# Configurações básicas de segurança
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'same-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# Configurações SSL/HTTPS (baseadas em variáveis de ambiente)
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0'))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False').lower() == 'true'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False').lower() == 'true'

# Configurações de Sessão e Cookies
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', str(not DEBUG)).lower() == 'true'
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', str(not DEBUG)).lower() == 'true'
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 86400  # 24 horas
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = False

# CSRF Settings
CSRF_COOKIE_AGE = 31449600  # 1 ano
CSRF_USE_SESSIONS = False
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://127.0.0.1:8000,http://localhost:8000').split(',')

# Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# =============================================================================
# CONFIGURAÇÕES DE CACHE E PERFORMANCE
# =============================================================================

# Configuração dinâmica de cache
CACHE_BACKEND = os.environ.get('CACHE_BACKEND', 'django.core.cache.backends.locmem.LocMemCache')
CACHE_LOCATION = os.environ.get('CACHE_LOCATION', 'unique-snowflake')

if 'redis' in CACHE_BACKEND.lower():
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1'),
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': CACHE_BACKEND,
            'LOCATION': CACHE_LOCATION,
        }
    }

# Configurações de Rate Limiting
RATELIMIT_ENABLE = os.environ.get('RATELIMIT_ENABLE', 'True').lower() == 'true'
RATELIMIT_USE_CACHE = os.environ.get('RATELIMIT_USE_CACHE', 'default')

# Custom User Model (já definido acima, removendo duplicação)

# Crispy Forms Configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Form rendering
CRISPY_FAIL_SILENTLY = not DEBUG

# =============================================================================
# CONFIGURAÇÕES DE LOGGING
# =============================================================================

# Nível de log baseado em variável de ambiente
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'DEBUG' if DEBUG else 'INFO')
LOG_FILE = os.environ.get('LOG_FILE', '')

# Configuração de logging
# Configuração dinâmica de handlers baseada em variáveis de ambiente
handlers = {
    'console': {
        'level': LOG_LEVEL,
        'class': 'logging.StreamHandler',
        'formatter': 'simple',
    },
}

# Adiciona handler de arquivo se especificado
if LOG_FILE:
    handlers['file'] = {
        'level': LOG_LEVEL,
        'class': 'logging.FileHandler',
        'filename': LOG_FILE,
        'formatter': 'verbose',
    }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': handlers,
    'root': {
        'handlers': list(handlers.keys()),
    },
    'loggers': {
        'django': {
            'handlers': list(handlers.keys()),
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': list(handlers.keys()),
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# =============================================================================
# CONFIGURAÇÕES DE ARQUIVOS E MÍDIA
# =============================================================================

# Configurações de upload baseadas em variáveis de ambiente
MAX_UPLOAD_SIZE = int(os.environ.get('MAX_UPLOAD_SIZE', '5242880'))  # 5MB padrão
FILE_UPLOAD_MAX_MEMORY_SIZE = MAX_UPLOAD_SIZE
DATA_UPLOAD_MAX_MEMORY_SIZE = MAX_UPLOAD_SIZE
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Extensões permitidas (baseadas em variáveis de ambiente)
ALLOWED_IMAGE_EXTENSIONS = os.environ.get('ALLOWED_IMAGE_EXTENSIONS', '.jpg,.jpeg,.png,.gif,.webp').split(',')
ALLOWED_DOCUMENT_EXTENSIONS = os.environ.get('ALLOWED_DOCUMENT_EXTENSIONS', '.pdf,.doc,.docx,.txt').split(',')

# =============================================================================
# CONFIGURAÇÕES DO SITE E PAGINAÇÃO
# =============================================================================

# Configurações de paginação baseadas em variáveis de ambiente
PAGINATE_BY = int(os.environ.get('PAGINATE_BY', '12'))
ARTICLES_PER_PAGE = int(os.environ.get('ARTICLES_PER_PAGE', '12'))
USERS_PER_PAGE = int(os.environ.get('USERS_PER_PAGE', '20'))

# Informações do site
SITE_NAME = os.environ.get('SITE_NAME', 'Havoc')
SITE_DESCRIPTION = os.environ.get('SITE_DESCRIPTION', 'Sistema de gerenciamento de conteúdo moderno')
SITE_URL = os.environ.get('SITE_URL', 'http://127.0.0.1:8000')

# =============================================================================
# REDES SOCIAIS E ANALYTICS
# =============================================================================

# Redes sociais
SOCIAL_MEDIA = {
    'facebook': os.environ.get('FACEBOOK_URL', ''),
    'twitter': os.environ.get('TWITTER_URL', ''),
    'linkedin': os.environ.get('LINKEDIN_URL', ''),
    'github': os.environ.get('GITHUB_URL', ''),
}

# Analytics e tracking
GOOGLE_ANALYTICS_ID = os.environ.get('GOOGLE_ANALYTICS_ID', '')
GOOGLE_TAG_MANAGER_ID = os.environ.get('GOOGLE_TAG_MANAGER_ID', '')
FACEBOOK_PIXEL_ID = os.environ.get('FACEBOOK_PIXEL_ID', '')

# =============================================================================
# CONFIGURAÇÕES PERSONALIZADAS DO HAVOC
# =============================================================================

# Módulos ativos do sistema
ACTIVE_MODULES = os.environ.get('ACTIVE_MODULES', 'accounts,config,pages,articles').split(',')

# Configurações de tema e localização
DEFAULT_THEME = os.environ.get('DEFAULT_THEME', 'light')
DEFAULT_LANGUAGE = os.environ.get('DEFAULT_LANGUAGE', 'pt-br')
DEFAULT_TIMEZONE = os.environ.get('DEFAULT_TIMEZONE', 'America/Sao_Paulo')

# Configurações de backup
BACKUP_DIR = os.environ.get('BACKUP_DIR', 'backups')
BACKUP_RETENTION_DAYS = int(os.environ.get('BACKUP_RETENTION_DAYS', '30'))

# Configurações de monitoramento
SENTRY_DSN = os.environ.get('SENTRY_DSN', '')
HEALTH_CHECK_ENABLED = os.environ.get('HEALTH_CHECK_ENABLED', 'True').lower() == 'true'

# Configurações de desenvolvimento
DJANGO_DEBUG_TOOLBAR = os.environ.get('DJANGO_DEBUG_TOOLBAR', 'False').lower() == 'true'
SHOW_SQL_QUERIES = os.environ.get('SHOW_SQL_QUERIES', 'False').lower() == 'true'

# =============================================================================
# CONFIGURAÇÕES CONDICIONAIS BASEADAS NO AMBIENTE
# =============================================================================

# Configurações específicas para produção
if ENVIRONMENT == 'production':
    # Força HTTPS em produção
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 ano
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    # Cookies seguros em produção
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    # Log level mais restritivo em produção
    if not os.environ.get('LOG_LEVEL'):
        LOG_LEVEL = 'WARNING'

# Configurações específicas para desenvolvimento
elif ENVIRONMENT == 'development':
    # Debug toolbar se habilitado
    if DJANGO_DEBUG_TOOLBAR:
        INSTALLED_APPS.append('debug_toolbar')
        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
        INTERNAL_IPS = ['127.0.0.1', 'localhost']

    # Mostrar queries SQL se habilitado
    if SHOW_SQL_QUERIES:
        LOGGING['loggers']['django.db.backends'] = {
            'level': 'DEBUG',
            'handlers': list(handlers.keys()),
            'propagate': False,
        }

# Configuração do Sentry para monitoramento de erros
if SENTRY_DSN:
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration
        from sentry_sdk.integrations.logging import LoggingIntegration

        sentry_logging = LoggingIntegration(
            level=logging.INFO,
            event_level=logging.ERROR
        )

        sentry_sdk.init(
            dsn=SENTRY_DSN,
            integrations=[DjangoIntegration(), sentry_logging],
            traces_sample_rate=0.1,
            send_default_pii=True,
            environment=ENVIRONMENT,
        )
    except ImportError:
        pass  # Sentry não instalado

# =============================================================================
# CONFIGURAÇÕES DO TINYMCE
# =============================================================================

TINYMCE_DEFAULT_CONFIG = {
    'height': 500,
    'width': '100%',
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'theme': 'silver',
    'plugins': '''
        advlist autolink lists link image charmap preview anchor
        searchreplace visualblocks code fullscreen insertdatetime media
        table paste code help wordcount emoticons hr pagebreak
        nonbreaking save print directionality template
    ''',
    'toolbar1': '''
        undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect |
        alignleft aligncenter alignright alignjustify | outdent indent | numlist bullist |
        forecolor backcolor removeformat | pagebreak | charmap emoticons
    ''',
    'toolbar2': '''
        visualblocks visualchars | hr nonbreaking anchor | link unlink | image media |
        table | code | fullscreen | preview save print | help
    ''',
    'menubar': True,
    'statusbar': True,
    'branding': False,
    'promotion': False,
    'content_css': '/static/css/tinymce-content.css',
    'contextmenu': 'link image table',
    'directionality': 'ltr',
    'language': 'pt_BR',
    'paste_data_images': True,
    'paste_as_text': False,
    'paste_auto_cleanup_on_paste': True,
    'paste_remove_styles': False,
    'paste_remove_styles_if_webkit': False,
    'paste_strip_class_attributes': 'none',
}

# Configurações específicas para diferentes campos
TINYMCE_CONFIGS = {
    'default': TINYMCE_DEFAULT_CONFIG,
    'simple': {
        'height': 200,
        'width': '100%',
        'plugins': 'link lists textcolor',
        'toolbar': 'bold italic underline | bullist numlist | link | forecolor',
        'menubar': False,
        'statusbar': False,
        'branding': False,
        'promotion': False,
    },
    'advanced': {
        'height': 600,
        'width': '100%',
        'plugins': '''
            advlist autolink lists link image charmap preview anchor
            searchreplace visualblocks code fullscreen insertdatetime media
            table paste code help wordcount emoticons hr pagebreak
            nonbreaking save print directionality template codesample
        ''',
        'toolbar1': '''
            undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect |
            alignleft aligncenter alignright alignjustify | outdent indent | numlist bullist |
            forecolor backcolor removeformat | pagebreak | charmap emoticons
        ''',
        'toolbar2': '''
            visualblocks visualchars | hr nonbreaking anchor | link unlink | image media |
            table | codesample code | fullscreen | preview save print | help
        ''',
        'menubar': True,
        'statusbar': True,
        'branding': False,
        'promotion': False,
        'content_css': '/static/css/tinymce-content.css',
        'contextmenu': 'link image table',
        'directionality': 'ltr',
        'language': 'pt_BR',
        'paste_data_images': True,
        'codesample_languages': [
            {'text': 'HTML/XML', 'value': 'markup'},
            {'text': 'JavaScript', 'value': 'javascript'},
            {'text': 'CSS', 'value': 'css'},
            {'text': 'PHP', 'value': 'php'},
            {'text': 'Python', 'value': 'python'},
            {'text': 'Java', 'value': 'java'},
            {'text': 'C', 'value': 'c'},
            {'text': 'C#', 'value': 'csharp'},
            {'text': 'C++', 'value': 'cpp'},
        ],
    }
}
