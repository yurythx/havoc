# Imagem base
FROM python:3.12-slim

# Vari√°veis de ambiente
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Diret√≥rio de trabalho
WORKDIR /app

# Instalar depend√™ncias do sistema
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    gcc \
    curl \
    git \
    netcat-traditional \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copiar e instalar as depend√™ncias do projeto
COPY requirements.txt requirements-prod.txt ./
RUN pip install --upgrade pip && pip install -r requirements-prod.txt

# Copiar o restante do c√≥digo
COPY . .

# Criar diret√≥rios necess√°rios
RUN mkdir -p /app/logs /app/media /app/staticfiles /app/static

# Criar script de entrypoint melhorado
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Fun√ß√£o para aguardar banco\n\
wait_for_db() {\n\
    echo "üîç Aguardando banco de dados ${DB_HOST:-db}:${DB_PORT:-5432}..."\n\
    local max_attempts=60\n\
    local attempt=1\n\
    \n\
    while [ $attempt -le $max_attempts ]; do\n\
        if nc -z ${DB_HOST:-db} ${DB_PORT:-5432}; then\n\
            echo "‚úÖ Banco de dados est√° dispon√≠vel!"\n\
            return 0\n\
        fi\n\
        echo "‚è≥ Tentativa $attempt/$max_attempts - aguardando..."\n\
        sleep 2\n\
        attempt=$((attempt + 1))\n\
    done\n\
    \n\
    echo "‚ùå Timeout: banco de dados n√£o ficou dispon√≠vel"\n\
    exit 1\n\
}\n\
\n\
# Fun√ß√£o para testar conex√£o com banco\n\
test_db_connection() {\n\
    echo "üîó Testando conex√£o com banco..."\n\
    python manage.py check --database default || {\n\
        echo "‚ùå Falha na conex√£o com banco"\n\
        return 1\n\
    }\n\
    echo "‚úÖ Conex√£o com banco OK!"\n\
}\n\
\n\
# Aguardar banco\n\
wait_for_db\n\
\n\
# Testar conex√£o\n\
test_db_connection\n\
\n\
echo "üì¶ Executando migra√ß√µes..."\n\
python manage.py migrate --noinput\n\
\n\
echo "üìÅ Coletando arquivos est√°ticos..."\n\
python manage.py collectstatic --noinput --clear\n\
\n\
echo "üë§ Criando superusu√°rio..."\n\
python manage.py create_default_superuser\n\
\n\
echo "üöÄ Iniciando aplica√ß√£o..."\n\
exec gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120' > /entrypoint.sh && chmod +x /entrypoint.sh

# Expor porta
EXPOSE 8000

# Entrypoint e comando padr√£o
ENTRYPOINT ["/entrypoint.sh"]
