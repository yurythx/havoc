from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.accounts.services.email_service import EmailService
import random
import string

User = get_user_model()


class Command(BaseCommand):
    help = 'Testa o envio de emails do sistema'

    def add_arguments(self, parser):
        parser.add_argument(
            '--email',
            type=str,
            help='Email de destino para o teste',
        )
        parser.add_argument(
            '--type',
            type=str,
            choices=['test', 'password_reset', 'registration'],
            default='test',
            help='Tipo de email para testar',
        )
        parser.add_argument(
            '--check-config',
            action='store_true',
            help='Apenas verificar configura√ß√µes sem enviar email',
        )

    def handle(self, *args, **options):
        email_service = EmailService()
        
        self.stdout.write(self.style.SUCCESS('=== TESTE DE EMAIL HAVOC ===\n'))
        
        # Verificar configura√ß√µes
        self.stdout.write('üìã Verificando configura√ß√µes...')
        config_status = email_service.get_config_status()
        
        self.stdout.write(f'Backend: {config_status["backend"]}')
        self.stdout.write(f'Configurado: {"‚úÖ Sim" if config_status["configured"] else "‚ùå N√£o"}')
        self.stdout.write(f'Pode enviar: {"‚úÖ Sim" if config_status["can_send"] else "‚ùå N√£o"}')
        
        if config_status['issues']:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  Problemas encontrados:'))
            for issue in config_status['issues']:
                self.stdout.write(f'   ‚Ä¢ {issue}')
        
        # Se apenas verificar configura√ß√µes
        if options['check_config']:
            return
        
        if not config_status['can_send']:
            self.stdout.write(self.style.ERROR('\n‚ùå N√£o √© poss√≠vel enviar emails. Configure primeiro.'))
            self.stdout.write('\nPara configurar:')
            self.stdout.write('1. Acesse /accounts/email/configuracao-rapida/')
            self.stdout.write('2. Ou use o painel de configura√ß√µes em /config/email/')
            return
        
        # Testar conex√£o
        self.stdout.write('\nüîå Testando conex√£o SMTP...')
        try:
            success, message = email_service.test_connection()
            if success:
                self.stdout.write(self.style.SUCCESS(f'‚úÖ {message}'))
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå {message}'))
                return
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro na conex√£o: {e}'))
            return
        
        # Determinar email de destino
        test_email = options.get('email')
        if not test_email:
            # Tentar usar email do primeiro superusu√°rio
            try:
                superuser = User.objects.filter(is_superuser=True).first()
                if superuser and superuser.email:
                    test_email = superuser.email
                    self.stdout.write(f'üìß Usando email do superusu√°rio: {test_email}')
                else:
                    self.stdout.write(self.style.ERROR('‚ùå Nenhum email especificado e nenhum superusu√°rio com email encontrado.'))
                    self.stdout.write('Use: python manage.py test_email --email seu@email.com')
                    return
            except Exception:
                self.stdout.write(self.style.ERROR('‚ùå Especifique um email: python manage.py test_email --email seu@email.com'))
                return
        
        # Enviar email baseado no tipo
        email_type = options['type']
        self.stdout.write(f'\nüì§ Enviando email de teste ({email_type}) para: {test_email}')
        
        try:
            if email_type == 'test':
                success, message = email_service.send_test_email(test_email, 'Usu√°rio Teste')
                
            elif email_type == 'password_reset':
                # Gerar c√≥digo de teste
                test_code = ''.join(random.choices(string.digits, k=6))
                self.stdout.write(f'üîë C√≥digo gerado: {test_code}')
                success = email_service.send_password_reset_code(test_email, test_code)
                message = f'C√≥digo de redefini√ß√£o enviado: {test_code}' if success else 'Falha ao enviar c√≥digo'
                
            elif email_type == 'registration':
                # Gerar c√≥digo de teste
                test_code = ''.join(random.choices(string.digits, k=6))
                self.stdout.write(f'üîë C√≥digo gerado: {test_code}')
                success = email_service.send_registration_confirmation(test_email, test_code)
                message = f'C√≥digo de confirma√ß√£o enviado: {test_code}' if success else 'Falha ao enviar c√≥digo'
            
            if success:
                self.stdout.write(self.style.SUCCESS(f'‚úÖ {message}'))
                self.stdout.write('\nüì¨ Verifique sua caixa de entrada!')
                
                # Mostrar informa√ß√µes adicionais
                if email_service.config['EMAIL_BACKEND'] == 'django.core.mail.backends.console.EmailBackend':
                    self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  Backend de console ativo - email aparecer√° no terminal do servidor'))
                
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå {message}'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erro ao enviar email: {e}'))
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write('üí° Dicas:')
        self.stdout.write('‚Ä¢ Para configurar email: /accounts/email/configuracao-rapida/')
        self.stdout.write('‚Ä¢ Para diagn√≥stico completo: /accounts/email/diagnostico/')
        self.stdout.write('‚Ä¢ Para testar redefini√ß√£o de senha: python manage.py test_email --type password_reset')
        self.stdout.write('‚Ä¢ Para verificar apenas config: python manage.py test_email --check-config')
