"""
Comando para criar configura√ß√µes iniciais de banco de dados
"""
from django.core.management.base import BaseCommand
from django.conf import settings
from apps.config.models import DatabaseConfiguration


class Command(BaseCommand):
    help = 'Cria configura√ß√µes iniciais de banco de dados'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a cria√ß√£o mesmo se j√° existirem configura√ß√µes',
        )

    def handle(self, *args, **options):
        force = options['force']
        
        # Verificar se j√° existem configura√ß√µes
        if DatabaseConfiguration.objects.exists() and not force:
            self.stdout.write(
                self.style.WARNING(
                    'J√° existem configura√ß√µes de banco. Use --force para sobrescrever.'
                )
            )
            return

        self.stdout.write('Criando configura√ß√µes iniciais de banco de dados...')

        # Configura√ß√£o SQLite (padr√£o para desenvolvimento)
        sqlite_config, created = DatabaseConfiguration.objects.get_or_create(
            name='SQLite Desenvolvimento',
            defaults={
                'description': 'Banco SQLite para desenvolvimento local',
                'engine': 'django.db.backends.sqlite3',
                'name_db': 'db.sqlite3',
                'host': '',
                'port': '',
                'user': '',
                'password': '',
                'is_default': True,
                'is_active': True,
                'options': {}
            }
        )

        if created:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Criada: {sqlite_config.name}')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è J√° existe: {sqlite_config.name}')
            )

        # Configura√ß√£o PostgreSQL (template para produ√ß√£o)
        postgres_config, created = DatabaseConfiguration.objects.get_or_create(
            name='PostgreSQL Produ√ß√£o',
            defaults={
                'description': 'Banco PostgreSQL para ambiente de produ√ß√£o',
                'engine': 'django.db.backends.postgresql',
                'name_db': 'havoc_prod',
                'host': 'localhost',
                'port': '5432',
                'user': 'postgres',
                'password': '',
                'is_default': False,
                'is_active': False,
                'options': {
                    'OPTIONS': {
                        'sslmode': 'prefer',
                    }
                }
            }
        )

        if created:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Criada: {postgres_config.name}')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è J√° existe: {postgres_config.name}')
            )

        # Configura√ß√£o MySQL (template)
        mysql_config, created = DatabaseConfiguration.objects.get_or_create(
            name='MySQL Local',
            defaults={
                'description': 'Banco MySQL para desenvolvimento ou produ√ß√£o',
                'engine': 'django.db.backends.mysql',
                'name_db': 'havoc_db',
                'host': 'localhost',
                'port': '3306',
                'user': 'root',
                'password': '',
                'is_default': False,
                'is_active': False,
                'options': {
                    'OPTIONS': {
                        'charset': 'utf8mb4',
                        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                    }
                }
            }
        )

        if created:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Criada: {mysql_config.name}')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è J√° existe: {mysql_config.name}')
            )

        # Configura√ß√£o PostgreSQL Docker (template)
        postgres_docker_config, created = DatabaseConfiguration.objects.get_or_create(
            name='PostgreSQL Docker',
            defaults={
                'description': 'Banco PostgreSQL rodando em container Docker',
                'engine': 'django.db.backends.postgresql',
                'name_db': 'havoc',
                'host': 'db',  # Nome do servi√ßo no docker-compose
                'port': '5432',
                'user': 'postgres',
                'password': 'postgres',
                'is_default': False,
                'is_active': False,
                'options': {}
            }
        )

        if created:
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Criada: {postgres_docker_config.name}')
            )
        else:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è J√° existe: {postgres_docker_config.name}')
            )

        # Testar configura√ß√£o padr√£o
        default_config = DatabaseConfiguration.objects.filter(is_default=True).first()
        if default_config:
            self.stdout.write(f'\nTestando configura√ß√£o padr√£o: {default_config.name}')
            success, message = default_config.test_connection()
            
            if success:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Teste de conex√£o: {message}')
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Teste de conex√£o: {message}')
                )

        # Resumo
        total_configs = DatabaseConfiguration.objects.count()
        active_configs = DatabaseConfiguration.objects.filter(is_active=True).count()
        default_config = DatabaseConfiguration.objects.filter(is_default=True).first()

        self.stdout.write('\n' + '='*50)
        self.stdout.write('RESUMO DAS CONFIGURA√á√ïES')
        self.stdout.write('='*50)
        self.stdout.write(f'Total de configura√ß√µes: {total_configs}')
        self.stdout.write(f'Configura√ß√µes ativas: {active_configs}')
        self.stdout.write(f'Configura√ß√£o padr√£o: {default_config.name if default_config else "Nenhuma"}')
        
        self.stdout.write('\nüìã PR√ìXIMOS PASSOS:')
        self.stdout.write('1. Acesse /admin/ para gerenciar as configura√ß√µes')
        self.stdout.write('2. Ou acesse /config/banco-dados/ para interface amig√°vel')
        self.stdout.write('3. Configure as credenciais dos bancos conforme necess√°rio')
        self.stdout.write('4. Teste as conex√µes antes de ativar')
        
        self.stdout.write(
            self.style.SUCCESS('\nüéâ Configura√ß√µes de banco criadas com sucesso!')
        )
