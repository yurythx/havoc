from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.config.services.module_service import ModuleService
from apps.config.models.app_module_config import AppModuleConfiguration

User = get_user_model()


class Command(BaseCommand):
    help = 'Inicializa o sistema de m√≥dulos do Havoc'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a reinicializa√ß√£o mesmo se j√° existirem m√≥dulos',
        )
        parser.add_argument(
            '--sync-only',
            action='store_true',
            help='Apenas sincroniza com apps instalados, n√£o inicializa m√≥dulos principais',
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Inicializando Sistema de M√≥dulos do Havoc...')
        )
        
        module_service = ModuleService()
        
        # Verifica se j√° existem m√≥dulos
        existing_modules = AppModuleConfiguration.objects.count()
        
        if existing_modules > 0 and not options['force']:
            self.stdout.write(
                self.style.WARNING(
                    f'‚ö†Ô∏è  Sistema j√° possui {existing_modules} m√≥dulos configurados.'
                )
            )
            self.stdout.write(
                'Use --force para reinicializar ou --sync-only para apenas sincronizar.'
            )
            return
        
        try:
            if not options['sync_only']:
                # Inicializa m√≥dulos principais
                self.stdout.write('üì¶ Inicializando m√≥dulos principais...')
                AppModuleConfiguration.initialize_core_modules()
                
                core_modules = AppModuleConfiguration.get_core_modules()
                for module in core_modules:
                    self.stdout.write(
                        f'  ‚úÖ {module.display_name} ({module.app_name})'
                    )
            
            # Sincroniza com apps instalados
            self.stdout.write('üîÑ Sincronizando com apps instalados...')
            sync_result = module_service.sync_with_installed_apps()
            
            if sync_result['created']:
                self.stdout.write(
                    f'  ‚úÖ Criados {len(sync_result["created"])} novos m√≥dulos:'
                )
                for app_name in sync_result['created']:
                    self.stdout.write(f'    - {app_name}')
            else:
                self.stdout.write('  ‚ÑπÔ∏è  Nenhum novo m√≥dulo encontrado.')
            
            if sync_result['missing']:
                self.stdout.write(
                    self.style.WARNING(
                        f'  ‚ö†Ô∏è  {len(sync_result["missing"])} m√≥dulos sem app correspondente:'
                    )
                )
                for app_name in sync_result['missing']:
                    self.stdout.write(f'    - {app_name}')
            
            # Estat√≠sticas finais
            stats = module_service.get_module_statistics()
            self.stdout.write('\nüìä Estat√≠sticas do Sistema:')
            self.stdout.write(f'  ‚Ä¢ Total de m√≥dulos: {stats["total"]}')
            self.stdout.write(f'  ‚Ä¢ M√≥dulos habilitados: {stats["enabled"]}')
            self.stdout.write(f'  ‚Ä¢ M√≥dulos principais: {stats["core"]}')
            self.stdout.write(f'  ‚Ä¢ M√≥dulos personalizados: {stats["custom"]}')
            
            # Lista m√≥dulos habilitados
            enabled_modules = module_service.get_enabled_modules()
            self.stdout.write('\nüü¢ M√≥dulos Habilitados:')
            for module in enabled_modules:
                status_icon = 'üîí' if module.is_core else 'üì¶'
                self.stdout.write(
                    f'  {status_icon} {module.display_name} ({module.app_name})'
                )
            
            self.stdout.write(
                self.style.SUCCESS('\n‚úÖ Sistema de m√≥dulos inicializado com sucesso!')
            )
            self.stdout.write(
                'Acesse /config/modulos/ para gerenciar os m√≥dulos do sistema.'
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao inicializar sistema de m√≥dulos: {str(e)}')
            )
            raise e
